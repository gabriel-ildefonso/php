O PHP vai interpretar o código dentro das tags de PHP.
Abertura: <?php
Fechamento: ?>

Deve haver ";" ao final de cada instrução;

Todo o código dentro das tags será executado pelo PHP, e então será impresso na tela. Tudo o que estiver fora das tags será impresso na tela, mas como texto puro, sem interação com o PHP.

PHP E SUAS DEPENDÊNCIAS
Dependências são as outras aplicações que o PHP traz consigo, também chamadas de extensões.
Podemos checar como o PHP e suas dependências estão instaladas no PC por meio da função phpinfo().
Essa função exibe as versões também dos pacotes instalados, bem útil para saber como o servidor está configurado.

CASE SENSITIVITY
Significa que a diferenciação ou não de letras maiúsculas e minúsculas;
Para instruções PHP não há essa diferença, ou seja: echo == ECHO;
Porém, para variáveis o PHP é case sensitive, ou seja: $nome != $NOME

INSTRUÇÕES DE CÓDIGO 
As instruções simples de PHP são separadas por ponto e vírgula;
Instruções simples são instruções de uma linha;
Quando há uma instrução maior, como de uma condição ou repetição, a definição da instrução é dada por abertura e fechamento de chaves; nestes casos não será necessário uso de ponto e vírgula.
Exemplo:
if (5 > 2) {
  echo "5 é maior que 2"
}

ESPAÇOS EM BRANCO
Para interpretação em PHP o espaço em branco é ignorado;
Isso acontece porque os espaços em branco são removidos antes da execução do código;
A quebra de linha também é ignorada;
Deve-se atentar para isso para não gerar erros durante a execução do programa.
Ex:echo                     "teste de espaço em branco"                   ;

COMENTÁRIOS NO CÓDIGO
Comentários servem para dar informações importantes e direcionamentos para o funcionamento do código;
Iniciamos o comentário com //;
Todo o conteúdo dentro de um comentário é ignorado na execução;
Não devem ser inseridas informações sensíveis nos comentários;
Outra forma de inserir comentários é com o #;
Para comentários multi linhas deve-se utilizar o /* ... */.

PALAVRAS RESERVADAS
Algumas palavras são reservadas da linguagem e já tem suas funcionalidades definidas, então não podemos utilizar em nossos programas;
Caso isso fosse possível poderíamos alterar sua função original;
Alguns exemplos: echo, insteadof, else, interface, namespace, pow, _DIR_, _FILE_, endif, print, private, protected, and, require, public, as, break, case, for, finally, switch, thow

TIPOS DE DADOS
Inteiro: podem ser verificados com a função is_int() dentro de um if 
if(is_int(6)){
  echo 'é um inteiro'
}

Float: casa decimal separada por ".". O php executa operações entre inteiro e float. Pode ser verificado com a função is_float().

Strings: Em php podemos escrever textos em aspas simples ou duplas, não há diferença para texto puro. Aspas duplas interpretam variáveis, ou seja, é possível imprimir uma variável dentro de uma string usando aspas duplas, assim:
  echo "eu tenho $idade anos de idade.
Podemos verificar com a função is_string(), que recebe um valor como parâmetro e retorna 1 ou 0, assim, devemos alinhar dentro da estrutura de um if.

Booleano: Verdadeiro ou falso, 1 ou 0. Alguns valores são considerados como falsos: 0, 0.0, [], NULL. Novamente, para checar, podemos usar a função is_bool().

Array: é um tipo de dado que serve para agrupar um conjunto de valores, podendo inserir qualquer tipo de dado na lista. Sempre entre [], dados separados por vírgula. Para imprimir um array, pode-se usar a função print_r(), a função echo somente imprime strings ou números.

Array Associativo: É basicamente um array, porém com chave e valor. A estrutura base é a mesma, mas constrói-se dessa maneira:
$arr = ['nome'=>'Gabriel', 'idade' => 30]
Chave entre aspas, seta para apontar o valor, e o valor.

Objetos
O php possui o paradigma de orientação a objetos; Podemos criar classes e objetos, e o objeto é considerado um tipo de dado; Objetos possuem métodos (funções) que são suas ações e propriedades que são suas características;

    class Pessoa {
      function falar() {
        echo 'olá pessoal!';
      }
    }
    $gabriel = new Pessoa();

    $gabriel->nome = "Gabriel";

    echo $gabriel->nome;

Null
O tipo de dado Null tem apenas um valor, o NULL; Um caso de uso do null seria checar se uma variável tem ou não valor; Podemos verificar se um valor é NULL com a função is_null();


        VARIÁVEIS 
São a forma que temos para declarar um valor e salvá-lo na momória; Uma variável em php tem o $ na frente do seu nome, ex: $nome = 'gabriel'. Podemos salvar qualquer tipo de dado, podenmos alterar o valor de uma variável no decorrer do programa. Podemos imprimir o valor de uma variável com echo.

Variável de Variável
Podemos criar uma variável por meio do nome de outra variável, com um valor diferente. O símbolo para esta função é o $$.
$x = 'teste'
$$x = 5
Após a execução do código, será criada a variável teste (conteúdo de $x), com o valor 5.
o $$ cria uma variável com o nome do valor da variável referida, com o valor novo atribuído.


Variável por referência
Podemos criar uma variável com referência a outra. o símbolo é "=&". Se mudarmos a variável de referência, a referenciada tem seu valor alterado; o contrário também funciona.
$x = 2;
$y =& $x;   //criamos a variável y espelhando a variável x
Qualquer alteração modifica as duas variáveis, pois elas fazem referência ao mesmo espaço na memória.


      ESCOPO
Assim como outras linguagens, em php também temos escopo de variáveis.
Local: variável declarada em uma função;
Global: variáveis declaradas fora de funções;
Static: Variável declarada dentro de função, porém o seu valor permanece salvo entre chamadas da função;
Parâmetros de função: variáveis passadas para uma função, podendo ser utilizadas ao longo da função.

Escopo Local
A variável local tem seu escopo definido dentro de uma função;
Ela não é acessível fora da função. 
Seu valor é sempre resetado quando a função é finalizada

Escopo Global
A principal característica é ser declarada fora de funções;
Por comportamento padrão, não são acessíveis dentro de funções; Precisamos utilizar a palavra global para isso.
Essa funcionalidade da variável global não ser acessível dentro de funções previne muitos problemas no software

$teste = 'asd'

function funcao() {
  global $teste     //aqui invocamos uma variável global para dentro do escopo da função
  $teste = 2;       //com a variável já dentro da função, conseguimos alterar o seu valor
  echo "$teste função global <br>;
}

Escopo Static
A variável estática é declarada com a instrução static;
O valor da variável é mantido e alterado a cada execução de uma função;
Esse comportamento é interessante pois as variáveis de escopo loval sempre são resetadas.

function testeStatic(){
  static $a = 0;
  $a++;
  echo "$a <br>";
}
testeStatic() //1
testeStatic() //2
testeStatic() //3
Na prática, ele executa o código e salva na memória o último valor atribuído à variável static.

Escopo dos Parâmetros
Os parâmetros de função também são considerados tipos de variáveis;
Este recurso nos ajuda a criar funções com valores dinâmicos, podendo alterá-los a cada invocação.
Podemos passar mais de um parâmetro para uma função.

function soma($a, $b){
  echo $a + $b;
  echo '<br>'
}
soma(2, 4);
soma(6, 8);
soma(10, 10);


      EXPRESSÕES E OPERADORES

O QUE É UMA EXPRESSÃO
É uma instrução de código que será avaliada e resultará em um valor.
Uma simples impressão de texto é uma expressão 
Uma soma ou operação matemática mais complexa também.
Na programação realizaremos diversas expressões durante o código.

O QUE É UM OPERADOR
Operadores são recursos que utilizamos para compor expressões mais complexas.
Alguns deles: +, -, *, /, ** , ++, >, <, >=, <=, etc.
Estas operações podem ser matemáticas ou comparações.
A ideia principal é que um novo valor é gerado ou também um booleano pode ser retornado

ORDEM DOS OPERADORES
O php, bem como demais linguagens, executam os operadores na mesma ordem que na matemática.
Ou seja: 2 + 2 * 4, teremos o resultado de 10.
Ainda podemos usar parênteses para alterar a ordem das operações.

MUDANÇA DE TIPO IMPLÍCITO
O php, em certas operações, muda o tipo de dado de forma implícita
por exemplo 5/2 == 2.5, dois inteiros geram um float
E 5 . 5 resulta em 55 (gera uma string, o "." é um operador de concatenação)
Por isso, temos que tomar cuidado com algumas expressões que podem gerar resultados indesejados.
Este recurso, mudar o tipo de dado, é chamado de auto cast.
